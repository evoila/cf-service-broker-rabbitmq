heat_template_version: 2015-10-15
description: Deployment Description for RabbitMQ Cluster Primary (Script 2/3)
parameters:
  image_id:
    type: string
    description: Image used for servers
  keypair:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the web servers
  volume_size:
    type: number
    description: Size of the volume to be created.
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
  rabbit_vhost:
    type: string
    description: RabbitMQ name
  rabbit_user:
    type: string
    description: RabbitMQ user
  rabbit_password:
    type: string
    description: RabbitMQ password
  log_host:
    type: string
    description: Host IP or FQDN for logging (Wird vom Script noch nicht verarbeitet!)
  log_port:
    type: string
    description: Port for logging host (Wird vom Script noch nicht verarbeitet!)
  erlang_key:
    type: string
    description: shared erlang key for all nodes
  etcHosts:
    type: string
    description: All hostnames to attach to /etc/hosts in format (127.0.0.1  localhost\n127.0.1.1  myservername\n\nxxx.xxx.xxx.xxx  server2n\nxxx.xxx.xxx.xxx  server3)
  masterHostname:
    type: string
    description: Hostname of machine
  port_prim:
    type: string
    description: Port-ID of primary vm
resources:
  cinder_volume_prim:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: nova
  volume_attachment_prim:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume_prim }
      instance_uuid: { get_resource: rabbit_prim }
      mountpoint: /dev/vdb
  rabbit_prim:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
      key_name: { get_param: keypair }
      name: { get_param: masterHostname }
      networks:
      - port: { get_param: port_prim }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            mkdir -p /data

            echo "/dev/vdb       /data       ext4    defaults     0 0" >> /etc/fstab

            mkfs.ext4 /dev/vdb

            mount -a

            echo -e "$etcHosts" >> /etc/hosts

            export REPOSITORY_RABBITMQ="https://bitbucket.org/meshstack/deployment-scripts-docker-openstack/raw/HEAD/rabbitmq"

            export REPOSITORY_RABBITMQ_CLUSTER="https://bitbucket.org/meshstack/deployment-scripts-docker-openstack/raw/HEAD/rabbitmq/cluster"

            export REPOSITORY_MONIT="https://bitbucket.org/meshstack/deployment-scripts-docker-openstack/raw/HEAD/monit"

            export REPOSITORY_MAIN="https://bitbucket.org/meshstack/deployment-scripts-docker-openstack/raw/HEAD"

            wget $REPOSITORY_RABBITMQ/rabbitmq-template.sh --no-cache

            wget $REPOSITORY_RABBITMQ_CLUSTER/rabbitmq-cluster.sh --no-cache

            chmod +x rabbitmq-template.sh

            chmod +x rabbitmq-cluster.sh

            echo rabbitmq-template.sh -d $amqp_vhost -u $amqp_user -p $amqp_password -e openstack

            ./rabbitmq-template.sh -d $amqp_vhost -u $amqp_user -p $amqp_password -e openstack

            echo rabbitmq-cluster.sh -e $erlang_key -t primary

            ./rabbitmq-cluster.sh -e $erlang_key -t primary

            wc_notify --data-binary '{"status": "SUCCESS"}'

          params:
            $amqp_vhost: {get_param: rabbit_vhost}
            $amqp_user: {get_param: rabbit_user}
            $amqp_password: {get_param: rabbit_password}
            $log_host: { get_param: log_host}
            $log_port: { get_param: log_port}
            $erlang_key: { get_param: erlang_key}
            $etcHosts: { get_param: etcHosts }

            wc_notify: { get_attr: [  'wait_handle', 'curl_cli'] }

  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600
  wait_for_it:
    type: OS::Heat::None
    depends_on: wait_condition
