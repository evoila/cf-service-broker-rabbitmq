heat_template_version: 2015-10-15
description: Deployment Description for MongoDB Replica Set
parameters:
  image_id:
    type: string
    description: Image used for servers
  keypair:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the web servers
  network_id:
    type: string
    description: Network used by the server
  subnet_id:
    type: string
    description: subnet id
  volume_size:
    type: number
    description: Size of the volume to be created.
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
  database_name:
    type: string
    description: Database name
  database_user:
    type: string
    description: Database user
  database_password:
    type: string
    description: Database password
  database_number:
    type: string
    description: Database number
  database_key:
    type: string
    description: Database key
  log_host:
    type: string
    description: Host IP or FQDN for logging
  log_port:
    type: string
    description: Port for logging host
  erlang_key:
    type: string
    description: shared erlang key for all nodes
  secondary_number:
    type: number
    description: number of secondaries for replica set
resources:
  port_prim:
    type: OS::Neutron::Port
    properties:
      network_id: {get_param: network_id}
      security_groups:
        - all
  rabbit_sec_ports:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: secondary_number }
      resource_def:
        type: OS::Neutron::Port
        properties:
          network_id: {get_param: network_id}
          security_groups:
            - all
  rabbit_sec:
    type: OS::Heat::ResourceGroup
    depends_on: rabbit_sec_ports
    properties:
      count: { get_param: secondary_number }
      resource_def:
        type: templateSingleSec.yaml
        properties:
          index: 0%index%
          name: rabbit_sec_%index%
          image_id: { get_param: image_id}
          network_port: { get_attr: [rabbit_sec_ports, refs, index] }
          volume_size: { get_param: volume_size}
          keypair: { get_param: keypair}
          flavor: { get_param: flavor}
          availability_zone: { get_param: availability_zone}
          user_data:
            str_replace:
              template: |
                #!/bin/bash

                export REPOSITORY_RABBITMQ="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/rabbitmq"
                export REPOSITORY_RABBITMQ_CLUSTER="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/rabbitmq/cluster"
                export REPOSITORY_MONIT="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/monit"
                export REPOSITORY_MAIN="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD"

                wget $REPOSITORY_RABBITMQ/rabbitmq-template.sh --no-cache
                wget $REPOSITORY_RABBITMQ_CLUSTER/rabbitmq-cluster.sh --no-cache
                chmod +x rabbitmq-template.sh
                chmod +x rabbitmq-cluster.sh
                echo rabbitmq-template.sh -d $db_name -u $db_user -p $db_password -e openstack -l $log_host -m $log_port
                ./rabbitmq-template.sh -d $db_name -u $db_user -p $db_password -e openstack -l $log_host -m $log_port
                echo rabbitmq-cluster.sh -e $erlang_key -t secondary -m $master
                ./rabbitmq-cluster.sh -e $erlang_key -t secondary -m $master

              params:
                $db_name: {get_param: database_name}
                $db_user: {get_param: database_user}
                $db_password: {get_param: database_password}
                $repset_name: rs1
                $erlang_key: {get_param: erlang_key}
                $master: { get_attr: [port_prim, fixed_ips, 0, ip_address] }
                $log_host: {get_param: log_host}
                $log_port: {get_param: log_port}
outputs:
  ip_pool:
    value:
      str_replace:
        template: { list_join: [', ', { get_attr: [port_prim, fixed_ips, 0, ip_address] }, { get_attr: [ rabbit_sec, ip ] }] }
        params: { ' ': '' }
  sec_ips:
    value: { get_attr : [ rabbit_sec, ip ]}
    description: Array of IPs of secondray instances
  prim_ip:
    value:  { get_attr: [port_prim, fixed_ips, 0, ip_address] }
    description: IP of primary mongo replica
  test_port:
    value: {get_attr: [rabbit_sec_ports, refs, 0]}
