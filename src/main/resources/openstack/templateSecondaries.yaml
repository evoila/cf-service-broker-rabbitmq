heat_template_version: 2015-10-15

parameters:
  image_id:
    type: string
    description: Image used for servers
  keypair:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the web servers
  network_port:
    type: string
    description: Network used by the server
  secondaryHostname:
    type: string
    description: Own hostname
  volume_size:
    type: number
    description: Size of the volume to be created.
  availability_zone:
    type: string
    description: The Availability Zone to launch the instance.
  rabbit_vhost:
    type: string
    description: RabbitMQ name
  rabbit_user:
    type: string
    description: RabbitMQ user
  rabbit_password:
    type: string
    description: RabbitMQ password
  log_host:
    type: string
    description: Host IP or FQDN for logging
  log_port:
    type: string
    description: Port for logging host
  erlang_key:
    type: string
    description: shared erlang key for all nodes
  masterHostname:
    type: string
    description: Hostname of master
  etcHosts:
    type: string
    description: hostname in format to attach to /etc/hosts

resources:
  volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      availability_zone: { get_param: availability_zone }
  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: volume }
      instance_uuid: { get_resource: instance }
      mountpoint: /dev/vdc
  instance:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: flavor}
      image: {get_param: image_id}
      key_name: {get_param: keypair}
      name: { get_param: secondaryHostname }
      networks:
      - port: {get_param: network_port }
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            echo "$etcHosts" >> /etc/hosts
            
            export REPOSITORY_RABBITMQ="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/rabbitmq"
            export REPOSITORY_RABBITMQ_CLUSTER="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/rabbitmq/cluster"
            export REPOSITORY_MONIT="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD/monit"
            export REPOSITORY_MAIN="https://bitbucket.org/evoila-boxer/deployment-scripts-docker-openstack/raw/HEAD"

            wget $REPOSITORY_RABBITMQ/rabbitmq-template.sh --no-cache
            wget $REPOSITORY_RABBITMQ_CLUSTER/rabbitmq-cluster.sh --no-cache

            chmod +x rabbitmq-template.sh
            chmod +x rabbitmq-cluster.sh
            echo rabbitmq-template.sh -d $amqp_vhost -u $amqp_user -p $amqp_password -e openstack -l $log_host -m $log_port
            ./rabbitmq-template.sh -d $amqp_vhost -u $amqp_user -p $amqp_password -e openstack -l $log_host -m $log_port
            echo rabbitmq-cluster.sh -e $erlang_key -t secondary -m $masterHostname
            ./rabbitmq-cluster.sh -e $erlang_key -t secondary -m $masterHostname

          params:
            $amqp_vhost: {get_param: rabbit_vhost}
            $amqp_user: {get_param: rabbit_user}
            $amqp_password: {get_param: rabbit_password}
            $repset_name: rs1
            $erlang_key: { get_param: erlang_key }
            $masterHostname: { get_param: masterHostname }
            $log_host: { get_param: log_host }
            $log_port: { get_param: log_port }
            $etcHosts: { get_param: etcHosts }
outputs:
  ip:
    value: { get_attr: [ instance, first_address ]}
  vm:
    value: { get_resource: instance }
