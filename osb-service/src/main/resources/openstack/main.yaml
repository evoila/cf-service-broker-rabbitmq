heat_template_version: 2016-04-08
description: >
        Deployment of RabbitMQ-Cluster with 3 nodes (Skript 3/5)
        Scripts 4 and 5 will used by this script for creation of the master and the standby node.
parameters:

  image_id:
    type: string
    description: Image used for servers
    default: ubuntu-xenial-16.04_softwareconfig_0.0.2
  key_name:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
    default: gp1.small
  availability_zone:
    type: string
    description: Availability Zone of the nodes.
    default: zone00
  resource_name:
    type: string
    description: Name-prefix for created resources in OpenStack.

  master_volume_id:
    type: string
    description: ID of the pre-created volume to be attached to the master node.
  master_port:
    type: string
    description: Port-ID of the pre-created Port for the master node.
  master_ip:
    type: string
    description: IP of master node.

  mirror_number:
    type: number
    description: number of mirrors
    default:  0
  mirror_volume_ids:
    type: comma_delimited_list
    description: ID of the pre-created volume to be attached to the mirror node.
    default: []
  mirror_ports: 
    type: comma_delimited_list
    description: Port-ID of the pre-created Port for the mirror node.
    default: []
  mirror_ips:
    type: comma_delimited_list
    description: IP of mirror node.
    default: []


  rabbitmq_vhost:
    type: string
    description: RabbitMQ name
  admin_user:
    type: string
    description: Admin user for the service.
    default: servicedb
  admin_password:
    type: string
    hidden: true
    description: Password for the service_user password.
  erlang_key:
    type: string
    description: shared erlang key for all nodes

resources:

  anti-affinity:
    type: OS::Nova::ServerGroup
    properties:
      name:
        str_replace:
         template: $resource_name-SG
         params:
           $resource_name: { get_param: resource_name }
      policies: [ 'anti-affinity' ]

  rabbitmq_master_node:
    type: node.yaml
    properties:
      hostname: { get_param: resource_name }
      image_id: {get_param: image_id }
      key_name: {get_param: key_name }
      flavor: {get_param: flavor }
      availability_zone: {get_param: availability_zone }
      rabbitmq_vhost: {get_param: rabbitmq_vhost }
      admin_user: {get_param: admin_user }
      admin_password: {get_param: admin_password }
      erlang_key: {get_param: erlang_key }
      mirror_ips: {get_param: mirror_ips }
      master_ip: { get_param: master_ip }
      master_port: {get_param: master_port }
      master_volume_id: {get_param: master_volume_id }
      server_group: {get_resource: anti-affinity}
      mirror_number: { get_param: mirror_number }

  rabbitmq_mirror_nodes:
    type: OS::Heat::ResourceGroup
    depends_on: rabbitmq_master_node
    properties:
      count: { get_param: mirror_number }
      resource_def:
        type: mirrors.yaml
        properties:
          mirror_index: 0%index%
          hostname: { get_param: resource_name }
          image_id: {get_param: image_id }
          key_name: {get_param: key_name }
          flavor: {get_param: flavor }
          availability_zone: {get_param: availability_zone }
          rabbitmq_vhost: {get_param: rabbitmq_vhost }
          admin_user: {get_param: admin_user }
          admin_password: {get_param: admin_password }
          erlang_key: {get_param: erlang_key }
          mirror_ports: {get_param: mirror_ports }
          mirror_volume_ids: {get_param: mirror_volume_ids }
          mirror_ips: {get_param: mirror_ips }
          master_ip: { get_param: master_ip }
          server_group: {get_resource: anti-affinity }
