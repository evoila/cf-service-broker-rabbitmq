heat_template_version: 2016-04-08
description: Deployment Description for RabbitMQ Cluster Mirror-Nodes (Script 5/5) Two Mirrors needed.

parameters:

  image_id:
    type: string
    description: Image used for servers
  key_name:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  availability_zone:
    type: string
    description: Availability Zone of the nodes.
  server_group:
    type: string
    description: server group of the nodes.

  master_ip:
    type: string
    description: IP

  mirror_index:
    type: number
    description: Index

  mirror_ips:
    type: comma_delimited_list
    description: IP 
  mirror_volume_ids:
    type: comma_delimited_list
    description: ID of the pre-created volume to be attached to the mirror node.
  mirror_ports:
    type: comma_delimited_list
    description: Network-Port used by the mirror node.
  
  rabbitmq_vhost:
    type: string
    description: RabbitMQ name
  admin_user:
    type: string
    description: Admin user for the service.
  admin_password:
    type: string
    hidden: true
    description: Password for the admin_user password.
  erlang_key:
    type: string
    description: shared erlang key for all nodes

  hostname:
    type: string
    description: Hostname of master node


resources:

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: 
        get_param: 
        - mirror_volume_ids 
        - { get_param: mirror_index }
      instance_uuid: { get_resource: rabbitmq_mirror_node }
      mountpoint: /dev/vdb

  rabbitmq_mirror_node:
    type: OS::Nova::Server
    properties:
      flavor: {get_param: flavor}
      image: {get_param: image_id}
      key_name: {get_param: key_name}
      scheduler_hints:
        group: {get_param: server_group} 
      name: 
        str_replace:
          template: $hostname-s$index
          params:
            $hostname: { get_param: hostname }
            $index:  { get_param: mirror_index }
      networks:
      - port: 
          get_param: 
          - mirror_ports
          - { get_param: mirror_index }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            mkdir -p /datai
            echo "/dev/vdb       /data       ext4    defaults     0 0" >> /etc/fstab
            mkfs.ext4 /dev/vdb
            mount -a
            
            OIFS=$IFS
            IFS=','
            ips="$mirror_ips"
            echo -e "$master_ip $hostname-m0" >> /etc/hosts
            i=0
            for ip in ${ips:1:-1}; do
              echo -e "$ip $hostname-s$i" >> /etc/hosts
              ((i++))
            done
            IFS=$OIFS
            
            export REPOSITORY_RABBITMQ="https://bitbucket.org/meshstack/deployment-scripts-rabbitmq/raw/HEAD/rabbitmq"
            export REPOSITORY_RABBITMQ_CLUSTER="https://bitbucket.org/meshstack/deployment-scripts-rabbitmq/raw/HEAD/rabbitmq/cluster"
            export REPOSITORY_MONIT="https://bitbucket.org/meshstack/deployment-scripts-monit/raw/HEAD/monit"

            wget $REPOSITORY_RABBITMQ/rabbitmq-template.sh --no-cache
            wget $REPOSITORY_RABBITMQ_CLUSTER/rabbitmq-cluster.sh --no-cache

            chmod +x rabbitmq-template.sh
            chmod +x rabbitmq-cluster.sh
            
            ./rabbitmq-template.sh -d $rabbitmq_vhost -u $admin_user -p $admin_password -e openstack

            ./rabbitmq-cluster.sh -d $rabbitmq_vhost -u $admin_user -p $admin_password -e $erlang_key -t secondary -m $hostname-m0


          params:
            $rabbitmq_vhost: {get_param: rabbitmq_vhost}
            $admin_user: {get_param: admin_user}
            $admin_password: {get_param: admin_password}
            $erlang_key: { get_param: erlang_key }
            $hostname: { get_param: hostname }
            $master_ip: { get_param: master_ip }
            $mirror_ips: { get_param: mirror_ips }


outputs:
  ip:
    value: { get_attr: [ rabbitmq_mirror_node, first_address ]}
  vm:
    value: { get_resource: rabbitmq_mirror_node }
