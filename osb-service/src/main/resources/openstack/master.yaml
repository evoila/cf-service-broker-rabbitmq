heat_template_version: 2016-04-08
description: Deployment Description for RabbitMQ Cluster Master-Node (Script 4/5)

parameters:

  image_id:
    type: string
    description: Image used for servers
  key_name:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  availability_zone:
    type: string
    description: Availability Zone of the nodes.

  master_hostname:
    type: string
    description: Hostname of the master node.
  master_volume_id:
    type: string
    description: ID of the pre-created volume to be attached to the master node.
  master_port:
    type: string
    description: Port-ID of the pre-created Port for the master node.
  etc_hosts:
    type: string
    description: All hostnames to attach to /etc/hosts in format (127.0.0.1  localhost\n127.0.1.1  myservername\n\nxxx.xxx.xxx.xxx  server2n\nxxx.xxx.xxx.xxx  server3)

  rabbitmq_vhost:
    type: string
    description: RabbitMQ name
  admin_user:
    type: string
    description: Admin user for the service.
  admin_password:
    type: string
    hidden: true
    description: Password for the admin_user password.
  erlang_key:
    type: string
    description: shared erlang key for all nodes


resources:

  volume_attachment_master:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_param: master_volume_id }
      instance_uuid: { get_resource: rabbitmq_master_node }
      mountpoint: /dev/vdb

  rabbitmq_master_node:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: flavor }
      image: { get_param: image_id }
      availability_zone: { get_param: availability_zone }
      key_name: { get_param: key_name }
      name: { get_param: master_hostname }
      networks:
      - port: { get_param: master_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            mkdir -p /data

            echo "/data       ext4    defaults     0 0" >> /etc/fstab
            mkfs.ext4 /dev/vdb
            mount -a

            echo -e "$etc_hosts" >> /etc/hosts

            export REPOSITORY_RABBITMQ="https://bitbucket.org/meshstack/deployment-scripts-rabbitmq/raw/try/rabbitmq"
            export REPOSITORY_RABBITMQ_CLUSTER="https://bitbucket.org/meshstack/deployment-scripts-rabbitmq/raw/try/rabbitmq/cluster"
            export REPOSITORY_MONIT="https://bitbucket.org/meshstack/deployment-scripts-monit/raw/HEAD/monit"

            wget $REPOSITORY_RABBITMQ/rabbitmq-template.sh --no-cache
            wget $REPOSITORY_RABBITMQ_CLUSTER/rabbitmq-cluster.sh --no-cache

            chmod +x rabbitmq-template.sh
            chmod +x rabbitmq-cluster.sh

            ./rabbitmq-template.sh -d $rabbitmq_vhost -u $admin_user -p $admin_password -e openstack

            ./rabbitmq-cluster.sh -d $rabbitmq_vhost -u $admin_user -p $admin_password -e $erlang_key -t primary


            wc_notify --data-binary '{"status": "SUCCESS"}'

          params:
            $rabbitmq_vhost: {get_param: rabbitmq_vhost}
            $admin_user: {get_param: admin_user}
            $admin_password: {get_param: admin_password}
            $erlang_key: { get_param: erlang_key}
            $etc_hosts: { get_param: etc_hosts }

            wc_notify: { get_attr: [  'wait_handle', 'curl_cli'] }

  wait_handle:
    type: OS::Heat::WaitConditionHandle
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600
  wait_for_it:
    type: OS::Heat::None
    depends_on: wait_condition